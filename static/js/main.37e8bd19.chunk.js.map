{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","username","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","email","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37e8bd19.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,username,id}) => \n{\n    \n    return(\n\n        <div className='bg-light-green dib br3 pa3 ma2 grow' >\n        <img  alt='dogs' src={`https://robohash.org/${id}?200x200`} />\n        <div>\n          <h2>{name}</h2>\n          <p>{username}</p>\n            \n        </div>\n\n        </div>\n\n\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList =({robots}) =>{\n\n    return(\n<div>\n {\n     robots.map((user,i)=>{\n     return(\n        <Card key={i} id={user.id} name={user.name} username={user.username} email={user.email} />\n        );\n\n })\n}\n\n\n</div>\n);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield , searchChange }) =>\n{\n\nreturn(\n<div className='pa2'>\n\n<input className='pa3 b--green bg-lightest-blue '\ntype='search'\nplaceholder='search robots'\nonChange={searchChange}\n/>\n\n\n</div>\n\n\n);\n\n}\n\nexport  default SearchBox ;","import React from 'react';\n\nconst Scroll=(props) =>\n{\n    return (\n\n     <div style={{overflowY:'scroll',border:'3px solid black'\n    ,height:'800px'}}>\n    {props.children}\n    </div>\n\n    );\n\n};\n\nexport default Scroll;\n\n\n","import React ,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\n\n\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport {setSearchField,requestRobots} from '../actions'\n\nconst mapStateToProps=state=>\n{\n    return{\n    \n        searchField:state.searchRobots.searchField,\n        robots:state.requestRobots.robots,\n        isPending:state.requestRobots.isPending,\n        error:state.requestRobots.error\n\n        }\n}\n\nconst mapDispatchToProps=(dispatch)=>\n{\n    return{\n    onSearchChange : (event)=> dispatch(setSearchField(event.target.value)),\n    onRequestRobots:()=>dispatch(requestRobots())\n    }\n}\n\n\n\nclass App extends Component{\n\n\n  \n  \n  componentDidMount()\n  {\n  \n      \n      this.props.onRequestRobots();\n      \n  }\n  \n     \n  \n      render(){\n  \n          \n          const {searchField,onSearchChange,robots,isPending}=this.props;\n          const filteredRobots=robots.filter(robot=>\n              {\n                  return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  \n              })\n              return isPending ?\n              \n             <h1>Loading</h1> :\n              \n              (\n                \n          <div className='tc'>\n              <h1 className='f1'>RoboFriends</h1>\n              <SearchBox searchChange={onSearchChange}/>\n          \n          <Scroll>\n          <CardList robots={filteredRobots}/>\n          </Scroll>      \n          </div>\n      );\n              }\n  \n     \n  }\n  \n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);\n","import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED} from './constants.js'\n\n\nexport const setSearchField=(text)=>\n(\n    {\n        type : CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n)\n\nexport const requestRobots=()=>(dispatch)=>\n{\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS , payload:data}))\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}\n\n","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD_';\n\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst intialStateSearch={\n\n    searchField:''\n}\n\n\n\nexport const searchRobots= (state=intialStateSearch,action={})=>\n{\n    switch(action.type)\n    {\n        case CHANGE_SEARCH_FIELD:\n        return Object.assign({},state,{searchField: action.payload});\n        default:\n        return state;\n    }\n}\n\nconst intialStateRobots=\n{\n    isPending:false,\n    robots:[],\n    error:''\n}\n\nexport const requestRobots=(state=intialStateRobots,action={})=>\n{\n    switch(action.type)\n    {\n        case REQUEST_ROBOTS_PENDING:\n        return Object.assign({},state,{isPending:true})\n        case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({},state,{robots:action.payload,isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n        return Object.assign({},state,{error:action.payload,isPending:false})\n        default:\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons';\n\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\n\nconst store= createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}